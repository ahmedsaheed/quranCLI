plugins {
    id 'java'
    id 'application'
    id 'org.jreleaser' version '1.0.0'
    id 'org.kordamp.gradle.java-project' version '0.47.0'

}

group 'org.example'
version '1.0-SNAPSHOT'

downloadLicenses {
    dependencyConfiguration = 'implementation'
    includeProjectDependencies = true
}

// build.gradle app
apply plugin: 'com.github.hierynomus.license'
configurations.implementation.setCanBeResolved(true)

repositories {
    mavenCentral()
}
tasks.withType(Javadoc) {
    failOnError false
    options.addStringOption('Xdoclint:none', '-quiet')
    options.addStringOption('encoding', 'UTF-8')
    options.addStringOption('charSet', 'UTF-8')
}

application {
    mainClass = 'src/main/java/quranCLI.java'
}

dependencies {
    implementation 'com.squareup.okhttp3:okhttp:4.10.0'
    implementation 'org.json:json:20220320'
    implementation 'org.jetbrains.kotlin:kotlin-stdlib-jdk8:1.7.0'
    implementation 'org.apache.commons:commons-lang3:3.12.0'
    implementation 'de.vandermeer:asciitable:0.3.2'
    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.8.1'
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.8.1'
    implementation 'info.picocli:picocli:4.6.1'
    annotationProcessor 'info.picocli:picocli-codegen:4.6.1'
    implementation group: 'javazoom', name: 'jlayer', version: '1.0.1'


}
config {
    info {
        name          = 'quranCLI'
        description   = 'A simple tool to Read, Search and Recite the Quran.'
        inceptionYear = '2022'
        vendor        = 'Ahmed Saheed'

        links {
            website      = 'https://github.com/ahmedsaheed/quranCLI'
            issueTracker = 'https://github.com/ahmedsaheed/quranCLI/issues'
            scm          = 'https://github.com/ahmedsaheed/quranCLI.git'
        }

        scm {
            url                 = 'https://github.com/ahmedsaheed/quranCLI'
            connection          = 'scm:git:https://github.com/ahmedsaheed/quranCLI.git'
            developerConnection = 'scm:git:https://github.com/ahmedsaheed/quranCLI.git'
        }

        people {
            person {
                id    = 'Ahmed Saheed'
                name  = 'Ahmed Saheed'
                roles = ['developer', 'author']
            }
        }
    }

    licensing {
        licenses {
            license {
                id = 'Apache-2.0'
                include "**/*.java"
                exclude "**/*Test.java"
                exclude "**/*.properties"

            }
        }
    }
}

jreleaser {
    release {
        github {
            owner = 'Ahmed Saheed'
            name = 'quranCLI'
            overwrite = true
            enabled = true
            connectTimeout = 20
            readTimeout = 60
            owner = 'Ahmed Saheed'
            host = 'github.com'
            username = 'ahmedsaheed'
            apiEndpoint = 'https://api.github.com'
            tagName = 'v1.0.0'
            previousTagName = 'v0.9.0'
            releaseName = 'Release v1.0.0'

        update{
            enabled = true
            section('ASSETS')
            skipTag = false
            skipRelease = false
            sign = false
            branch = 'main'
            uploadAssets = 'ALWAYS'
            files = true
            artifacts = true
            checksums = true
            signatures = true
            draft = false
            prerelease {

                enabled = false
                pattern = '.*-pre'
            }

            discussionCategoryName = 'Announcements'
            commitAuthor {
                // Name used when authoring commits.
                // Defaults to `jreleaserbot`.
                //
                name = 'Ahmed Saheed'

                // E-mail used when authoring commits.
                // Defaults to `jreleaser@kordamp.org`.
                //
                email = 'saheed@quranCLI.com'
            }
            changelog {
                // Disables or enables the changelog.
                // defaults to `true`.
                //
                enabled = true

                // Sorts commits in ascending (oldest first) or descending (newer first).
                // Valid values are = `ASC`, `DESC`.
                // Defaults to `DESC`.
                //
                sort = 'DESC'

                // Path to an external file that contains the changelog, read as is.
                // May be a relative path to the configuration file or an absolute path.
                // If unspecified, JReleaser will automatically calculate the changelog.
                //

                // Create explicit markdown links for commit hashes.
                // Defaults to `false`.
                //
                links = false
                formatted = 'ALWAYS'

                // Preconfigured changelog options.
                // Valid values are [`gitmoji`, `conventional-commits`].
                // Requires `formatted` to be enabled.
                // Defaults to empty.
                //
                preset = 'gitmoji'

                // The template to use for each change.
                // Defaults to `- {{commitShortHash}} {{commitTitle}} ({{commitAuthor}})`.
                //
                format = '- {{commitShortHash}} {{commitTitle}}'

                // The template to use for the whole changelog.
                // Defaults is shown.
                //
                content = '#Changelog\n\n{{changelogChanges}}\n{{changelogContributors}}'

                // Path to a template file that defines the contents.
                // Review the available Name Templates.
                // Defaults to `src/jreleaser/templates/changelog.tpl`.
                //

                //
                contributors {
                    // Enables the contributors block.
                    // Defaults to `true`.
                    //
                    enabled = true

                    // The template to use for each contributor.
                    // Defaults to `{{contributorName}}`.
                    //
                    format = '- {{contributorName}} ({{contributorUsernameAsLink}})'
                }

                //
                hide {
                    // Hide uncategorized commits.
                    // Defaults to `false`.
                    //
                    uncategorized = true

                    // Hide matching categories.
                    // Entries must exactly match category keys defined below.
                    // Defaults to empty.
                    //
                    categories = ['merge']

                    // Hide matching contributor names.
                    // Value may be plain text or regex.
                    // Defaults to empty.
                    //
                    contributors = ['[bot]']
                }

                // A list of labels to be included.
                // Only changes matching this list will be included.
                // Defaults to empty.
                //
                includeLabels = [
                        'issue'
                ]

                // A list of labels to be excluded.
                // Changes matching this list will be excluded.
                // Defaults to empty.
                //
                excludeLabels = [
                        'issue'
                ]

                // Defines rules that apply labels to changes.
                // Matchers are evaluated independently; the label will
                // be set if at least one
                labeler {
                    // The label to be applied.
                    //
                    label = 'issue'

                    // Matches the text of the first commit line.
                    // Value may be plain text or regex.
                    // Use `regex:` as prefix to indicate a regex.
                    //
                    title = 'regex:fix:'

                    // Matches the full text of the commit.
                    // Value may be plain text or regex.
                    // Use `regex:` as prefix to indicate a regex.
                    //
                    body = 'Fixes #'

                    // Priority when sorting.
                    // Defaults to `null`
                    //
                    order = 1
                }

                // Groups changes by category.
                // Defaults are shown.
                //
                category  {
                    title = 'üöÄ Features'
                    // Used for identifying the category
                    key = 'features'
                    labels = [
                            'feature',
                            'enhancement'
                    ]
                    order = 1
                }
                category {
                    title = 'üêõ Bug Fixes'
                    key = 'fixes'
                    // You may override the format per category.

                    format = '- {{commitShortHash}} {{commitBody}}'
                    labels = [
                            'bug',
                            'fix'
                    ]
                    order = 2
                }
//                replacer {
//                    search = '\[chore\]\s'
//                    replace = ''
//                }
//                replacer {
//                    search = '/CVE-(\d{4})-(\d+)/g'
//                    replace = 'https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-$1-$2'
//                }
            }

            // A milestone associated with the release
            //
            milestone {
                // Close the milestone (if it exists and still open) upon release.
                // Defaults to `true`.
                //
                close = true

                name = '{{tagName}}'
            }

            // The following properties define  URL formats.
            // Defaults are shown.
            // Review the available Name Templates.

            //
            repoUrl = 'https://{{repoHost}}/{{repoOwner}}/{{repoName}}'

            //
            repoCloneUrl = 'https://{{repoHost}}/{{repoOwner}}/{{repoName}}.git'

            //
            commitUrl = 'https://{{repoHost}}/{{repoOwner}}/{{repoName}}/commits'

            //
            srcUrl = 'https://{{repoHost}}/{{repoOwner}}/{{repoName}}/blob/{{repoBranch}}'

            //
            downloadUrl = 'https://{{repoHost}}/{{repoOwner}}/{{repoName}}/releases/download/{{tagName}}/{{artifactFile}}'

            //
            releaseNotesUrl = 'https://{{repoHost}}/{{repoOwner}}/{{repoName}}/releases/tag/{{tagName}}'

            //
            latestReleaseUrl = 'https://{{repoHost}}/{{repoOwner}}/{{repoName}}/releases/latest'

            //
            issueTrackerUrl = 'https://{{repoHost}}/{{repoOwner}}/{{repoName}}/issues'
        }


            }




        }

    distributions {
        app {
            artifact {
                path = 'build/distributions/{{distributionName}}-{{projectVersion}}.zip'
            }
        }
    }

    packagers {
        //
        brew {
            // Enables or disables Homebrew.
            // Valid values are [`NEVER`, `ALWAYS`, `RELEASE`, `SNAPSHOT`].
            // Defaults to `NEVER`.
            //
            active = 'NEVER'

            // Let the release continue if the packager fails.
            // Defaults to `false`.
            //
            continueOnError = false

            // Custom download URL.
            //
            downloadUrl = 'https://{{repoHost}}/{{repoOwner}}/{{repoName}}/releases/download/{{tagName}}/{{artifactFile}}'

            // Additional properties used when evaluating templates.
            // Key will be capitalized and prefixed with `brew`, i.e, `brewFoo`.
            //
            extraProperties.put('foo', 'bar')

            // Directory with file templates used to prepare the Homebrew distribution.
            // Defaults to `src/jreleaser/distributions/${distribution.name}/brew`.
            // If specified, path must exist.
            //

            // List of template files to be skipped.
            // Value may be an exact match or a regex.
            //
            skipTemplate('README.md.tpl')

            // Git author used to commit to the repository.
            //
            commitAuthor {
                // Name used when authoring commits.
                // Defaults to `jreleaserbot`.
                //
                name = 'Ahmed Saheed'

                // E-mail used when authoring commits.
                // Defaults to `jreleaser@kordamp.org`.
                //
                email = 'saheed@quranCLI.com'
            }

            // Git repository to push the formula to.
            // Defaults are shown.
            //
            repoTap {
                // Enables or disables the repoTap.
                // Valid values are [`NEVER`, `ALWAYS`, `RELEASE`, `SNAPSHOT`].
                // Defaults to `RELEASE`.
                //
                active = 'ALWAYS'


                // The owner of the repoTap.
                // Defaults to the same owner as the release repository.
                //
                owner = 'Ahmed Saheed'

                // The name of the repoTap.
                // Defaults to `homebrew-tap`.
                //
                name = 'homebrew-tap'

                // The tag associated with the formula.
                // If left unspecified, will use `{{tagName}}`.
                //
                tagName = '{{distributionName}} {{tagName}}'

                // The target branch to use.
                // May define a `JRELEASER_BRANCH` environment variable instead.
                // Defaults to the branch pointed by HEAD.
                //
                branch = 'HEAD'

                // Username used for authoring commits. Must have write access to the repoTap.
                // If left unspecified, the `JRELEASER_HOMEBREW_${GIT}_USERNAME`
                // environment variable must be defined.
                // Defaults to the same username as the release repository.
                //
                username = 'ahmedsaheed'

                // Password or OAuth token with write access to the repoTap.
                // If left unspecified, the `JRELEASER_HOMEBREW_${GIT}_TOKEN`
                // environment variable must be defined.
                //
                token = '__DO_NOT_SET_HERE__'
//
//                    # Message when committing to the repoTap.
//                    # If left unspecified, `{{distributionName}} {{tagName}}` will be used.
//                    #
                commitMessage = '{{distributionName}} {{tagName}}'
            }

            // The class name of the generated formula.
            // If left unspecified, will use `{{projectNameCapitalized}}`.
            //
            formulaName = 'quranCLI'

            // Create a formula that supports OSX & Linux.
            // Applicable to distributions of type [JLINK, NATIVE_IMAGE, BINARY].
            // Default is `false`.
            //
            multiPlatform = false

            // Customize the livecheck block.
            // Default is empty.
            //
            livecheck = [
                    'url "https://host/sparkle/appcast-release.xml"',
                    'strategy :sparkle']

            // A map of Homebrew dependencies.
            // The key `openjdk@${java.version}` will be added automatically if not defined.
            // This can be skipped by adding `skipJava` as an extra property on the distribution.
            //
            dependencies {
                // key in symbol format
                // mapped as `depends_on :key1 => "value1"`
                dependency(':key1', 'value1')

                // plain key
                // mapped as `depends_on "key2" => "value2"`
                dependency('key2', 'value2')

                // key in symbol format without value
                // mapped as `depends_on :key3`
                dependency(':key3')

                // plain key without value
                // mapped as `depends_on "key4"`
                dependency('key4')
            }

            // Cask configuration.
            // Requires artifact with extension `.dmg` or `.pkg`.
            // Defaults are shown.
            //
            cask {

                // Favors producing a cask instead of a formula.
                // Default is `false`.
                //
                enabled = true

                // The class name of the generated cask.
                // If left unspecified, will use `{{projectName}}`.
                //
                name = 'quranCLI'

                // The name of the generated cask.
                // If left unspecified, will use `{{brewFormulaName}}`.
                //
                displayName = 'quranCLI'

                // Relative path to the .pkg file.
                // If left unspecified, will use the filename of the .pkg file.
                //
                pkgName = 'app-1.0.0.pkg'

                // Name of the application folder.
                // If left unspecified, will use `{{brewFormulaName}}.app`.
                //
                appName = 'quranCLI.app'

                // URL providing an appcast feed to find updates for this Cask.
                // Default is empty.
                //
                appcast = 'https://{{repoHost}}/{{repoOwner}}/{{repoName}}/releases.atom'

                // Procedures to uninstall the Cask.
                //
                uninstall = [
                        pkgutil: [
                                'com.example'
                        ]
                ]

                // Additional procedures for a more complete uninstall.
                //
                zap = [
                        trash: [
                                '~/Library/Caches/App'
                        ]
                ]
            }
        }
    }
}


compileJava {
    options.compilerArgs += ["-Aproject=${project.group}/${project.name}"]
}


test {
    useJUnitPlatform()
}